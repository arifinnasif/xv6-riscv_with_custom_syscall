diff --git a/Makefile b/Makefile
index 39a99d7..20fc50d 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
+	$U/_swaptest2\
+	$U/_swaptest3\
+	$U/_swaptest4\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +158,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..ac8a275 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,13 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct swap_info {
+  struct swap* swap_page;
+  uint64 swap_page_va;
+  int pid;
+  char exist;
+};
 
 // bio.c
 void            binit(void);
@@ -36,6 +43,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +72,12 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void add_a_live_page(uint64 va, uint64 pa, int pid);
+struct swap_info remove_swap_info(uint64 swap_page_va, int pid);
+void remove_a_live_page(uint64 va, int pid);
+void remove_and_free_swap_info_by_pid(int pid);
+int get_live_page_count(int pid);
+void print_live_page_count_all();
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -88,7 +103,7 @@ int             fork(void);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+void            proc_freepagetable(pagetable_t, uint64, int pid);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +121,14 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+pagetable_t get_pagetable_by_pid(int pid);
+
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -162,17 +185,19 @@ void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
-uint64          uvmdealloc(pagetable_t, uint64, uint64);
-int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
-void            uvmunmap(pagetable_t, uint64, uint64, int);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int, int pid);
+uint64          uvmdealloc(pagetable_t, uint64, uint64, int pid);
+int             uvmcopy(pagetable_t, pagetable_t, uint64, int oldpid, int newpid);
+void            uvmfree(pagetable_t, uint64, int pid);
+void            uvmunmap(pagetable_t, uint64, uint64, int, int pid);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void set_use_bit1(uint64 va, int pid);
+void set_use_bit2(uint64 va, pagetable_t pagetable);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..5b0315b 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -62,7 +62,7 @@ exec(char *path, char **argv)
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
     uint64 sz1;
-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), p->pid)) == 0)
       goto bad;
     sz = sz1;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, p->pid)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
@@ -126,13 +126,13 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, p->pid);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, p->pid);
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..f2fd5ff 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,6 +9,8 @@
 #include "riscv.h"
 #include "defs.h"
 
+#define MAX_SWAP_PAGES 1024
+
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
@@ -23,11 +25,236 @@ struct {
   struct run *freelist;
 } kmem;
 
+// struct swap_info {
+//   struct swap* swap_page;
+//   uint64 swap_page_va;
+//   int pid;
+//   char exist;
+// };
+
+struct swap_info swap_info_list[MAX_SWAP_PAGES];
+
+
+
+struct live_page {
+  uint64 va;
+  uint64 pa;
+  int pid;
+  char use_bit;
+  char exist;
+};
+
+struct spinlock live_page_lock;
+struct spinlock swap_info_lock;
+
+#define MAX_LIVE_PAGE 50
+
+struct live_page live_page_list[MAX_LIVE_PAGE];
+
+int total_live_page = 0;
+
+int victim_index = 0;
+
+// get a victim page using clock algorithm
+struct live_page get_victim() {
+  if(DEBUG) printf("get victim called\n");
+  int i = 0;
+  // acquire(&live_page_lock);
+  while (i < MAX_LIVE_PAGE) {
+    if (live_page_list[victim_index].exist == 1) {
+      if (live_page_list[victim_index].use_bit == 1) {
+        live_page_list[victim_index].use_bit = 0;
+        victim_index = (victim_index + 1) % MAX_LIVE_PAGE;
+      } else {
+        // release(&live_page_lock);
+        live_page_list[victim_index].exist = 0;
+        return live_page_list[victim_index];
+      }
+    }
+    i++;
+  }
+
+  for(int i = 0; i < MAX_LIVE_PAGE; i++) {
+    if(live_page_list[i].exist == 1) {
+      live_page_list[i].exist = 0;
+      return live_page_list[i];
+    }
+  }
+  // release(&live_page_lock);
+  for(int i = 0; i < MAX_LIVE_PAGE; i++) {
+    printf("exist: %d, use_bit: %d\n", live_page_list[i].exist, live_page_list[i].use_bit);
+  }
+  panic("no victim page");
+}
+
+
+// add a swap_info to the swap_info_list
+void add_swap_info(int pid, uint64 swap_page_va, struct swap *swap_page) {
+  if(DEBUG) printf("add_swap_info called: %p, %p\n", swap_page_va, swap_page);
+  if(!swap_page) printf("swap_page is null %p",swap_page_va);
+  for(int i = 0; i < MAX_SWAP_PAGES; i++) {
+    if(swap_info_list[i].exist == 0) {
+      swap_info_list[i].swap_page_va = swap_page_va;
+      swap_info_list[i].swap_page = swap_page;
+      swap_info_list[i].pid = pid;
+      swap_info_list[i].exist = 1;
+      return;
+    }
+  }
+  panic("swap_info_list is full");
+}
+
+
+// add a page to live page list
+void add_a_live_page(uint64 va, uint64 pa, int pid) {
+  if(pid == 0) return;
+  if(DEBUG) printf("add a live page called %d: %p, %p %d\n", total_live_page, va, pa, pid);
+  if(va == TRAMPOLINE || va == TRAPFRAME) return;
+  acquire(&live_page_lock);
+  if (total_live_page >= MAX_LIVE_PAGE) {
+    struct live_page victim = get_victim();
+    if(DEBUG) printf("victim: %p, %p\n", victim.va, victim.pa);
+    release(&live_page_lock);
+    if(DEBUG) printf("before walk\n");
+    pagetable_t victim_pagetable;
+    // printf("add_a_live_page:\n");
+    if((victim_pagetable = get_pagetable_by_pid(victim.pid))) {
+      // printf("pid: %d\n", victim.pid);
+      // panic("THIS SHOULD NOT HAPPEN");
+    }
+    pte_t *pte = walk(victim_pagetable, victim.va, 0);
+    
+    if(DEBUG) printf("HELLO\n");
+    *pte |= PTE_SWAP;
+    *pte &= ~PTE_V;
+    sfence_vma();
+    struct swap * new_swap_page = swapalloc();
+    swapout(new_swap_page, (char *) PTE2PA(*pte));
+    
+    add_swap_info(victim.pid, victim.va, new_swap_page);
+    printf(">>>swapped out va:%p pid:%d\n",victim.va, victim.pid);
+    
+    // *walk(victim_pagetable, victim_va, 0) = 0;
+    sfence_vma();
+    // add the victim page to free list
+    kfree((void *)(victim.pa));
+    total_live_page--;
+    // release(&live_page_lock);
+    acquire(&live_page_lock);
+  }
+
+  // acquire(&live_page_lock);
+  for (int i = 0; i < MAX_LIVE_PAGE; i++) {
+    if (live_page_list[i].exist == 0) {
+      live_page_list[i].va = va;
+      live_page_list[i].pa = pa;
+      live_page_list[i].pid = pid;
+      live_page_list[i].use_bit = 1;
+      live_page_list[i].exist = 1;
+      total_live_page++;
+      break;
+    }
+  }
+  release(&live_page_lock);
+}
+
+// remove a livepage from live page list
+void remove_a_live_page(uint64 va, int pid) {
+  if(DEBUG) printf("remove_a_live_page() called: %p, %d\n", va, pid);
+  if(va == TRAMPOLINE || va == TRAPFRAME) return;
+  acquire(&live_page_lock);
+  for (int i = 0; i < MAX_LIVE_PAGE; i++) {
+    if (live_page_list[i].va == va && live_page_list[i].pid == pid && live_page_list[i].exist == 1) {
+      live_page_list[i].exist = 0;
+      total_live_page--;
+      break;
+    }
+  }
+  release(&live_page_lock);
+}
+
+
+
+// remove a swap_info from the swap_info_list
+struct swap_info remove_swap_info(uint64 swap_page_va, int pid) {
+  if(DEBUG) printf("remove_swap_info() called: %p\n", swap_page_va);
+  for(int i = 0; i < MAX_SWAP_PAGES; i++) {
+    if(swap_info_list[i].swap_page_va == swap_page_va && swap_info_list[i].pid == pid && swap_info_list[i].exist == 1) {
+      swap_info_list[i].exist = 0;
+      if(!swap_info_list[i].swap_page) printf("swap_page is null\n");
+      // printf("-s removed a swap_info: %p, %d\n", swap_page_va, pid);
+      return swap_info_list[i];
+    }
+  }
+  struct swap_info ret;
+  ret.exist = -1;
+  return ret;
+}
+
+void remove_and_free_swap_info_by_pid(int pid) {
+  // acquire(&swap_info_lock);
+  for(int i = 0; i < MAX_SWAP_PAGES; i++) {
+    if(swap_info_list[i].pid == pid && swap_info_list[i].exist == 1) {
+      swap_info_list[i].exist = 0;
+      if(!swap_info_list[i].swap_page) printf("swap_page is null\n");
+      swapfree(swap_info_list[i].swap_page);
+      // printf("-sf removed and freed a swap_info: %d\n", pid);
+      // return swap_info_list[i];
+    }
+  }
+  // release(&swap_info_lock);
+}
+
+void set_use_bit1(uint64 va, int pid) {
+  if(pid == 0) return;
+  // if(DEBUG) printf("set_use_bit called: %p\n", va);
+  acquire(&live_page_lock);
+  for (int i = 0; i < MAX_LIVE_PAGE; i++) {
+    if (live_page_list[i].exist == 1 && live_page_list[i].va == va && live_page_list[i].pid == pid) {
+      live_page_list[i].use_bit = 1;
+      break;
+    }
+  }
+  release(&live_page_lock);
+}
+
+void set_use_bit2(uint64 va, pagetable_t pagetable) {
+  // if(pid == 0) return;
+  // if(DEBUG) printf("set_use_bit called: %p\n", va);
+  acquire(&live_page_lock);
+  for (int i = 0; i < MAX_LIVE_PAGE; i++) {
+    // printf("set_use_bit:\n");
+    if (live_page_list[i].exist == 1 && live_page_list[i].va == va && get_pagetable_by_pid(live_page_list[i].pid) == pagetable) {
+      // printf("set_use_bit:\n");
+      live_page_list[i].use_bit = 1;
+      break;
+    }
+  }
+  release(&live_page_lock);
+}
+
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&live_page_lock, "live_page_lock");
+  initlock(&swap_info_lock, "swap_info_lock");
   freerange(end, (void*)PHYSTOP);
+  for(int i = 0; i < MAX_LIVE_PAGE; i++) {
+    live_page_list[i].va = 0;
+    live_page_list[i].pa = 0;
+    live_page_list[i].pid = 0;
+    live_page_list[i].use_bit = 0;
+    live_page_list[i].exist = 0;
+  }
+  for(int i = 0; i < MAX_SWAP_PAGES; i++) {
+    swap_info_list[i].swap_page = 0;
+    swap_info_list[i].swap_page_va = 0;
+    swap_info_list[i].pid = 0;
+    swap_info_list[i].exist = 0;
+  }
+  swapinit();
 }
 
 void
@@ -80,3 +307,17 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// live page count
+int get_live_page_count(int pid) {
+  int count = 0;
+  acquire(&live_page_lock);
+  for(int i = 0; i < MAX_LIVE_PAGE; i++) {
+    if(live_page_list[i].exist == 1 && live_page_list[i].pid == pid) {
+      count++;
+    }
+  }
+  release(&live_page_lock);
+  return count;
+}
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..5010b47 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -155,11 +155,18 @@ found:
 static void
 freeproc(struct proc *p)
 {
+  release(&p->lock);
+  // printf("freeproc: %d\n", p->pid);
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  
+  remove_and_free_swap_info_by_pid(p->pid);
+  
+  // release(&p->lock);
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+    proc_freepagetable(p->pagetable, p->sz, p->pid);
+  // acquire(&p->lock);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +176,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  acquire(&p->lock);
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -189,7 +197,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 0);
     return 0;
   }
 
@@ -197,8 +205,8 @@ proc_pagetable(struct proc *p)
   // trampoline.S.
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
-    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0, p->pid);
+    uvmfree(pagetable, 0, p->pid);
     return 0;
   }
 
@@ -208,11 +216,11 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz, int pid)
 {
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0, 0);
+  uvmfree(pagetable, sz, pid);
 }
 
 // a user program that calls exec("/init")
@@ -264,11 +272,11 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, p->pid)) == 0) {
       return -1;
     }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(p->pagetable, sz, sz + n, p->pid);
   }
   p->sz = sz;
   return 0;
@@ -289,11 +297,14 @@ fork(void)
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  release(&np->lock);
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz, p->pid, np->pid) < 0){
+    acquire(&np->lock);
     freeproc(np);
     release(&np->lock);
     return -1;
   }
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -414,9 +425,11 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
-          freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          acquire(&pp->lock);
+          freeproc(pp);
+          release(&pp->lock);
           return pid;
         }
         release(&pp->lock);
@@ -681,3 +694,32 @@ procdump(void)
     printf("\n");
   }
 }
+
+pagetable_t get_pagetable_by_pid(int pid) {
+  if(pid == 0) return 0;
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->pid == pid){
+      release(&p->lock);
+      return p->pagetable;
+    }
+    release(&p->lock);
+  }
+  // printf("ei process er pagetable nai %d\n", pid);
+  return 0;
+}
+
+void print_live_page_count_all() {
+  struct proc *p;
+
+  printf("PID\tLIVE_PAGE_COUNT\n");
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED) {
+      printf("%d\t\t%d\n",p->pid, get_live_page_count(p->pid));
+    }
+    release(&p->lock);
+  }
+}
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..81467c8 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -16,6 +16,7 @@ r_mhartid()
 #define MSTATUS_MPP_S (1L << 11)
 #define MSTATUS_MPP_U (0L << 11)
 #define MSTATUS_MIE (1L << 3)    // machine-mode interrupt enable.
+#define DEBUG 0
 
 static inline uint64
 r_mstatus()
@@ -343,6 +344,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_SWAP (1L << 9) // page is swapped out
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..98cd6fc
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,136 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+  
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  if(s == 0) return;
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+  
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a71b9e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sysinfo] sys_sysinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e1e8e84 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sysinfo  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cee69fe 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,14 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_sysinfo(void)
+{
+  printf("--------------------\n");
+  print_live_page_count_all();
+  printf("--------------------\n");
+  // add condition that might cause failure
+  return 0;
+}
+
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..f7e0518 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,40 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if ((r_scause() == 15) ||
+             (r_scause() == 13) ||
+             (r_scause() == 12)) {
+    uint64 va = PGROUNDDOWN(r_stval());
+    pte_t *pte = walk(p->pagetable, va, 0);
+    uint64 flags = PTE_FLAGS(*pte);
+    if(!(((r_scause() == 15) && ((*pte) & PTE_W) && !((*pte) & PTE_V) && ((*pte) & PTE_SWAP)) ||
+        ((r_scause() == 13) && ((*pte) & PTE_R) && !((*pte) & PTE_V) && ((*pte) & PTE_SWAP)) ||
+        ((r_scause() == 12) && ((*pte) & PTE_X) && !((*pte) & PTE_V) && ((*pte) & PTE_SWAP)))) {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+      goto after_handler;
+    }
+    struct swap_info s = remove_swap_info(va, p->pid);
+    if((char) s.exist < (char) 0) {
+      printf("killing %d\n", p->pid);
+      setkilled(p);
+      goto after_handler;
+    }
+    char* pa = kalloc();
+    flags |= PTE_V;
+    flags &= ~PTE_SWAP;
+    swapin(pa, s.swap_page);
+    printf("<<<swapped in va:%p pid:%d\n", va, p->pid);
+    // printf("swap freed\n");
+    swapfree(s.swap_page);
+    uvmunmap(p->pagetable, va, 1, 0, p->pid);
+    sfence_vma();
+    mappages(p->pagetable, va, PGSIZE, (uint64)pa, flags);
+    if(p->pid !=0 && !(flags & PTE_X)) {
+      add_a_live_page(va, (uint64)pa, p->pid);
+    }
+
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -73,6 +107,8 @@ usertrap(void)
     setkilled(p);
   }
 
+  after_handler:
+
   if(killed(p))
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..a637009 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -99,6 +101,7 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
       *pte = PA2PTE(pagetable) | PTE_V;
     }
   }
+  set_use_bit2(va, pagetable);
   return &pagetable[PX(0, va)];
 }
 
@@ -168,7 +171,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 // page-aligned. The mappings must exist.
 // Optionally free the physical memory.
 void
-uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free, int pid)
 {
   uint64 a;
   pte_t *pte;
@@ -179,13 +182,25 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
+    
+    
+    
+
     if(do_free){
+      if(pid>0 && (*pte & PTE_SWAP) != 0) {
+        struct swap_info s = remove_swap_info(a, pid);
+        if((char) s.exist > (char) 0) {
+          // printf("swap freed\n");
+          swapfree(s.swap_page);
+        }
+      }
+      remove_a_live_page(a, pid);
       uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      if((*pte & PTE_SWAP) == 0) kfree((void*)pa);
     }
     *pte = 0;
   }
@@ -223,7 +238,7 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int pid)
 {
   char *mem;
   uint64 a;
@@ -235,15 +250,18 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, pid);
       return 0;
     }
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz, pid);
       return 0;
     }
+    if(pid != 0 && !(xperm & PTE_X)){
+      add_a_live_page(a, (uint64)mem, pid);
+    }
   }
   return newsz;
 }
@@ -253,14 +271,14 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 uint64
-uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int pid)
 {
   if(newsz >= oldsz)
     return oldsz;
 
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1, pid);
   }
 
   return newsz;
@@ -289,10 +307,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz, int pid)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1, pid);
   freewalk(pagetable);
 }
 
@@ -303,7 +321,7 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
 int
-uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz, int oldpid, int newpid)
 {
   pte_t *pte;
   uint64 pa, i;
@@ -313,13 +331,31 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if(!(*pte & PTE_V) && !(*pte & PTE_SWAP))
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
+    if(!(flags & PTE_V) && (flags & PTE_SWAP)) {
+      struct swap_info s = remove_swap_info(i, oldpid);
+      if(s.exist < 0) {
+        panic("uvmcopy: swap page not present");
+      }
+      flags |= PTE_V;
+      flags &= ~PTE_SWAP;
+      swapin(mem, s.swap_page);
+      swapfree(s.swap_page);
+      pa = (uint64)kalloc();
+      memmove((char*)pa, mem, PGSIZE);
+      add_a_live_page(i,pa,oldpid);
+      add_a_live_page(i,(uint64)mem,newpid);
+      mappages(old, i, PGSIZE, pa, flags);
+      sfence_vma();
+    } else {
+      memmove(mem, (char*)pa, PGSIZE);
+      add_a_live_page(i,(uint64)mem,newpid);
+    }
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
@@ -328,7 +364,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return 0;
 
  err:
-  uvmunmap(new, 0, i / PGSIZE, 1);
+  uvmunmap(new, 0, i / PGSIZE, 1, oldpid);
   return -1;
 }
 
diff --git a/user/swaptest2.c b/user/swaptest2.c
new file mode 100644
index 0000000..cda18e2
--- /dev/null
+++ b/user/swaptest2.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char** argv) {
+    if(argc != 2) {
+        printf("failed\n");
+        exit(-1);
+    }
+    printf("start (pid %d)\n", getpid());
+    sysinfo();
+    int count = atoi(argv[1]);
+    // char * page[count];
+    for(int i = 0; i < count; i++) {
+        printf("allocating a page from %d\n", getpid());
+        sbrk(4096);
+        sysinfo();
+        // sbrk(4096);
+    }
+    printf("end (pid %d)\n", getpid());
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/swaptest3.c b/user/swaptest3.c
new file mode 100644
index 0000000..fb37cda
--- /dev/null
+++ b/user/swaptest3.c
@@ -0,0 +1,31 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char** argv) {
+    if(argc != 2) {
+        printf("failed\n");
+        exit(-1);
+    }
+    printf("start (pid %d)\n", getpid());
+    sysinfo();
+    int count = atoi(argv[1]);
+    char * page[count];
+    for(int i = 0; i < count; i++) {
+        printf("allocating a page from %d\n", getpid());
+        page[i] = sbrk(4096);
+        sysinfo();
+        // sbrk(4096);
+    }
+
+    printf("starting write (pid %d)\n", getpid());
+    for(int i = 0; i < count; i++) {
+        printf("writing to page %p\n", page[i]);
+        *page[i] = 'a';
+        sysinfo();
+    }
+    printf("write done (pid %d)\n", getpid());
+    printf("end (pid %d)\n", getpid());
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/swaptest4.c b/user/swaptest4.c
new file mode 100644
index 0000000..862fb89
--- /dev/null
+++ b/user/swaptest4.c
@@ -0,0 +1,41 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char** argv) {
+    printf("start (pid %d)\n", getpid());
+    sysinfo();
+    int count = 51;
+    char * page[count];
+    for(int i = 0; i < count; i++) {
+        printf("allocating a page from %d\n", getpid());
+        page[i] = sbrk(4096);
+        sysinfo();
+        // sbrk(4096);
+    }
+    printf("fork...\n");
+    int pid = fork();
+    if(pid < 0) {
+        printf("Fork failed\n");
+        exit(-1);
+    } else if(pid == 0) {
+        printf("in child process\n");
+        sysinfo();
+        printf("Writing in child process\n");
+        for(int i = 0; i < count; i++) {
+            printf("writing to page address %p started\n", page[i]);
+            *page[i] = 'c';
+            printf("writing to page address %p ended\n", page[i]);
+            sysinfo();
+        }
+
+        printf("child process exiting\n");
+    exit(0);
+    } else {
+        wait(0);
+        printf("in parent process again\n");
+        sysinfo();
+        printf("parent process exiting\n");
+        exit(0);
+    }
+}
\ No newline at end of file
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..e2c10d7
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char** argv) {
+    printf("start\n");
+    int count = atoi(argv[1]);
+    char * page[count];
+    for(int i = 0; i < count; i++) {
+        printf("allocating a page from %d\n", getpid());
+        page[i] = sbrk(4096);
+        sysinfo();
+        // sbrk(4096);
+    }
+    printf("starting write\n");
+    for(int i = 0; i < count; i++) {
+        *page[i] = 'a';
+    }
+    printf("write done\n");
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..a800dfe 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sysinfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..4f1f768 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sysinfo");
